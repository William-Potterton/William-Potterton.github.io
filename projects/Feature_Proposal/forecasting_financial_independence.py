# -*- coding: utf-8 -*-
"""EF308 Budget Advisor Datasets

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ta_fQzTJ373I3xLLs0IGOqEyHRCTI6dQ

Financial Independence Regression and Forecasting
"""

# Financial Independence Regression and Forecasting

import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import pandas_datareader.data as web
import datetime
from sklearn.preprocessing import MinMaxScaler
from statsmodels.tsa.stattools import adfuller
from scipy.optimize import curve_fit
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
df = pd.read_csv('reddit_finance.csv')
to_drop = ['pan_inc_chg',
          'pan_inc_chg_pct',
          'pan_exp_chg',
          'pan_exp_chg_pct',
          'pan_ret_date_chg',
          'pan_fi_chg',
          'pan_financial_impact',
          'political',
          'race_eth',
          'gender',
          'rel_status',
          'children',
           'fin_indy_num',
           'fin_indy_pct',
           'max_retire_sup',
           'whn_fin_indy_num',
           'fin_indy_lvl',
           'stp_whn_fin_indy',
           'industry',
           'employer',
           'role',
           'gig_status',
           'student_loans',
           'mortgage',
           'auto_loan',
           'credit_personal_loan',
           'medical_debt',
           'invst_prop_bus_own_debt',
           'other_debt',
           'edu',
           'retire_invst_num',
           'retire_exp',
           'retire_age',
           '2020_necessities_exp',
           '2020_lux_exp',
           '2020_child_exp',
           '2020_debt_repay',
           '2020_charity',
           '2020_healthcare_exp',
           '2020_edu_exp',
           '2020_taxes',
           '2020_other_exp',
           'edu_status',
           'spec_crypto',
           'invst_prop_bus_own',
           'other_val',
           '2020_housing_exp',
           '2020_utilities_exp',
           '2020_transp_exp',
           'housing',
           'ne_status',
           'home_value',
           'ft_status',
           'pt_status']
df.drop(to_drop, inplace=True, axis=1)
df.rename(columns = {'Unnamed: 0': 'Identifier'}, inplace = True)
df.rename(columns = {'tgt_sf_wthdrw_rt': 'Safe Withdrawal Rate'}, inplace = True)
df.rename(columns = {'brokerage_accts_tax': 'Brokerage accounts'}, inplace = True)
df.rename(columns = {'retirement_accts_tax': 'Retirement accounts'}, inplace = True)
df.rename(columns = {'invst_accts': 'Investment/Savings Accounts'}, inplace = True)
df.rename(columns = {'2020_gross_inc': 'Gross Income'}, inplace = True)
df.rename(columns = {'2020_invst_save': 'Investment/Savings'}, inplace = True)
df = df.set_index('Identifier')
df.fillna(0, inplace=True)
rows_to_remove = df[df['Gross Income'] == 0]
rows_to_remove = df[df['Investment/Savings'] == 0]
df = df.drop(rows_to_remove.index)
df = df[df['country'] == 'United States']
non_numeric_columns = df.select_dtypes(include=['object']).columns
columns_to_exclude = ['age']
non_numeric_columns = non_numeric_columns.drop(columns_to_exclude)
df = pd.get_dummies(df, columns=non_numeric_columns)
for col in ['Gross Income', 'Investment/Savings']:
            df[col] = df[col].astype(float)
bool_columns = df.select_dtypes(include=bool).columns
df[bool_columns] = df[bool_columns].astype(int)
print(df)

Q1 = df['Gross Income'].quantile(0.25)
Q3 = df['Gross Income'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers_income = df[(df['Gross Income'] < lower_bound) | (df['Gross Income'] > upper_bound)]
df = df.drop(outliers_income.index)
Q1 = df['Investment/Savings'].quantile(0.25)
Q3 = df['Investment/Savings'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers_savings = df[(df['Investment/Savings'] < lower_bound) | (df['Investment/Savings'] > upper_bound)]
df = df.drop(outliers_savings.index)
Q1 = df['cash'].quantile(0.25)
Q3 = df['cash'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers_cash = df[(df['cash'] < lower_bound) | (df['cash'] > upper_bound)]
df = df.drop(outliers_cash.index)

X = df['Gross Income']
y = df['Investment/Savings']
X = X.values.reshape(-1, 1)
y = y.values.reshape(-1, 1)
model = sm.OLS(y, X)
results = model.fit()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model_train = sm.OLS(y_train, X_train)
results_train = model_train.fit()
coefficients = results_train.params
y_pred = results_train.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r_sq = results_train.rsquared
intercept = results_train.params[0]
fig, ax = plt.subplots(figsize=(11, 8))
plt.scatter(df['Gross Income'], df['Investment/Savings'])
num = len(df)
start = df['Gross Income'].min()
end = df['Gross Income'].max()
plt.ticklabel_format(style='plain', useOffset=False)
xseq = np.linspace(start, end, num=num)
plt.plot(xseq, intercept+coefficients[0]*xseq, color="red", lw=1.5)
beta0 = r'$intercept = \hat\beta_0 =$' + str(np.round(intercept,2))
ax.text(20, 110000, beta0, fontsize=10)
beta1 = r'$slope = \hat\beta_1 =$' + str(np.round(coefficients[0],2))
ax.text(20, 100000, beta1, fontsize=10)
r_squared = r'$R^2 =$' + str(np.round(r_sq,2))
ax.text(20, 90000, r_squared, fontsize=10)
ax.set_title('Linear regression: Investment/Savings and Gross Income')
ax.set_xlabel('Gross Income $')
ax.set_ylabel('Investment/Savings $')
plt.show()
results.summary()

age_range_mapping = {'18-23': 0, '24-28': 1, '29-33': 2, '34-38': 3, '39-43': 4, '44-48': 5, '49-53': 6,}
X_mapped = np.array([[age_range_mapping.get(str(age), 0) for age in row] for row in X])
X = df['age']
df['age_mapped'] = X.apply(lambda age: age_range_mapping.get(str(age), 0))
X = df['age_mapped']
y = df['Investment/Savings']
sm.add_constant(X)
X = X.values.reshape(-1, 1)
y = y.values.reshape(-1, 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model_train = sm.OLS(y_train, X_train)
assert X.shape[0] == y.shape[0]
agemodel = sm.OLS(y, X)
results2 = agemodel.fit()
mean_investment_by_age_group = df.groupby('age_mapped')['Investment/Savings'].mean().reset_index()
plt.figure(figsize=(10, 7))
plt.xticks(list(age_range_mapping.values()), list(age_range_mapping.keys()))
sns.barplot(x='age_mapped', y='Investment/Savings', data=mean_investment_by_age_group, hue='age_mapped', legend=False, order=range(len(age_range_mapping)))
plt.xlabel('Age Groups')
plt.ylabel('Mean Investment/Savings')
plt.title('Mean Investment/Savings by Age Groups')
plt.plot(mean_investment_by_age_group['age_mapped'], mean_investment_by_age_group['Investment/Savings'], marker='o', color='red', linestyle='-', linewidth=2)
for x, y in zip(mean_investment_by_age_group['age_mapped'], mean_investment_by_age_group['Investment/Savings']):
    formatted_value = f'${y:.0f}'
    plt.text(x, y, formatted_value, ha='center', va='bottom', fontsize=10, color='black')
plt.xticks(range(len(age_range_mapping)), list(age_range_mapping.keys()), rotation=45)
plt.tight_layout()
plt.show()



num_months = 180
monthly_deposit = 440
annual_interest_rates = [0.05, 0.035, 0.02]
dates = pd.date_range(start='2024-01-01', periods=num_months, freq='M')
variation_range = 0.0005
monthly_interest_rates = [(1 + annual_rate) ** (1/12) - 1 for annual_rate in annual_interest_rates]
colours = ['blue', 'purple', 'red']
plt.figure(figsize=(10, 6))
all_max_savings = []
all_min_savings = []
all_mean_savings = []
for i, monthly_rate in enumerate(monthly_interest_rates):
    all_savings = []
    for _ in range(10):
        interest_rates = []
        for month in range(num_months):
            variation = np.random.uniform(low=-variation_range, high=variation_range)
            rate = monthly_rate + variation
            interest_rates.append(rate)
        future_values = {}
        for j, rate in enumerate(interest_rates):
            future_values[f'Interest Rate {j+1}'] = np.cumsum([monthly_deposit * ((1 + rate) ** n) for n in range(num_months)])
        forecast_data = pd.DataFrame(future_values, index=dates)
        all_savings.append(forecast_data)
    for savings_df in all_savings:
        for col in savings_df.columns:
            plt.plot(savings_df.index, savings_df[col], alpha=0.1, color=colours[i])
    min_savings = pd.concat(all_savings).min(axis=1).resample('M').mean()
    max_savings = pd.concat(all_savings).max(axis=1).resample('M').mean()
    plt.fill_between(dates, min_savings, max_savings, color=colours[i], alpha=0.3)
    mean_savings = pd.concat(all_savings).mean(axis=1).resample('M').mean()
    plt.plot(mean_savings.index, mean_savings, color='black', linewidth=2, label=f'Mean Savings for Interest Rate {annual_interest_rates[i]*100:.1f}%')
    all_mean_savings.append(mean_savings)
concat_mean_savings = pd.concat(all_mean_savings)
for i, mean_val in enumerate(concat_mean_savings.iloc[-3:]):
    mean_val = all_mean_savings[i].iloc[-1]
    plt.text(concat_mean_savings.index[-1] - pd.Timedelta(days=1000), mean_val, f'Mean Savings for Interest Rate {annual_interest_rates[i]*100:.1f}%: €{mean_val:.0f}', ha='right', va='center', color='black', fontsize=10)
plt.ylabel('Total Savings (€)')
plt.title('Forecasted Total Savings with Different Interest Rates')
plt.grid(True)
plt.legend()
ax = plt.gca()
leg = ax.get_legend()
leg.legend_handles[2].set_color('red')
leg.legend_handles[1].set_color('purple')
leg.legend_handles[0].set_color('blue')
plt.tight_layout()
plt.show()